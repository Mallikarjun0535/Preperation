import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collectors;

public class Test {

	private void sample() {
		List<String> names = new ArrayList<>();
		names.add("mallik"); 
		names.add("sinu");
		names.add("azzez"); 
		names.add("samba"); 
		names.add("punnet");
		names.add("krishana");
		names.add(null);
		
//traverse
//for each

		//For each element they doing some action
		// Here we are just using internal iterator the concept is here  for each method will take consumer<? super T> interface  as input
		//it is functional interface which has only one method (accept()) and some other default methods 
		//instead of writing the functional interface implemented class and implementing  a method by passing a parameter  and calling every time 
		//By using  "type inference" we calling the method passing a lambda expression. 
		//names.forEach(System.out::println);
		names.forEach(n ->  {
			if(Objects.nonNull(n)) {
				System.out.println(n.toUpperCase()); 
			}
		});

//transform		
//Map
		
	   //Here Stream is an interface which avoids the mutability 
		//A Stream is much like an iterator on a collection 
		// The Stream’s map() method can map or transform a sequence of input to a sequence of output—
		//the map() method collects the result of running the lambda expression and returns the result collection.
		//element types in the input don’t have to match the element types in the output collection.
		//In this case, the input would still be a sequence of strings, but the output would be a sequence of numbers,
		names.stream()
			 .map(name -> name.length())
			 .forEach(System.out::println);
		

//Finding Elements
//filter		
		//The filter() method expects a lambda expression that returns a boolean result.
		//here filter() method takes a reference to a java.util.function.Predicate functional interface.
		//	Here, the Java compiler works its magic to synthesize an implementation of
		//the Predicate’s test() method from the given lambda expression.
		//The filter() method returns an iterator just like the map() method does, but the
		//similarity ends there. Whereas the map() method returns a collection of the
		//same size as the input collection, the filter() method may not.
		names.stream()
				.filter(name -> name.startsWith("s"))
				.collect(Collectors.toList())
				.forEach(name -> System.out.println("Starts with s  "+ name));
		

		// Reusing the lamada expresions
		final List<String> friends = Arrays.asList("Brian", "Nate", "Neal", "Raju", "Sara", "Scott");
		final List<String> editors = Arrays.asList("Brian", "Jackie", "John", "Mike");
		final List<String> comrades = Arrays.asList("Kate", "Ken", "Nick", "Paula", "Zach");
		
		final long countFriendsStartN = friends.stream().filter(name -> name.startsWith("N")).count();
		final long countEditorsStartN = editors.stream().filter(name -> name.startsWith("N")).count();
		final long countComradesStartN = comrades.stream().filter(name -> name.startsWith("N")).count();
				
		
		//we can assign lambda expressions to variables and reuse them, just like with objects.
		//Rather than asking Java to synthesize the method at the argument-definition location, we
		//can be more explicit. In this example, it’s possible to store the lambda expression in an explicit reference of type Predicate and then pass it to the
		//function; this is an easy way to remove the duplication.
		
		final Predicate<String> startsWithN = name -> name.startsWith("N");
		final long countFriendsStartwithN = friends.stream().filter(startsWithN).count();
		final long countEditorsStartwithN = editors.stream().filter(startsWithN).count();
		final long countComradesStartwithN = comrades.stream().filter(startsWithN).count();

//Lexical Scoping
		
		//we could extract the letter as a parameter to a function and
		//pass the function as an argument to the filter() method.
		final Predicate<String> startsWithN_ = name -> name.startsWith("N");
		final Predicate<String> startsWithB = name -> name.startsWith("B");
		final long countFriendsStartN_ = friends.stream().filter(startsWithN).count();
		final long countFriendsStartB = friends.stream().filter(startsWithB).count();
		
		final long countFriendsStartN__ = friends.stream().filter(checkIfStartsWith("N")).count();
		final long countFriendsStartB_ = friends.stream().filter(checkIfStartsWith("B")).count();
		
	
		
		
		
//Narrow the Scope	
		
		
		//In the preceding (smelly) example we used a static method, but we don’t want
		//to pollute the class with static methods to cache each variable in the future.
		//It would be nice to narrow the function’s scope to where it’s needed. We can
		//do that using a Function interface.
		
		
		//This lambda expression replaces the static method checkIfStartsWith() and can
		//appear within a function, just before it’s needed. The startsWithLetter variable
		//refers to a Function that takes in a String and returns a Predicate.
		

//multiple input for predicate
		final Function<String, Predicate<String>> startsWithLetter = (String letter) -> {
			Predicate<String> checkStarts = (String name) -> name.startsWith(letter);
			return checkStarts;
		};
		
		final Function<String, Predicate<String>> startsWithLettera = (String letter) -> (String name) -> name.startsWith(letter);
		final Function<String, Predicate<String>> startsWithLetteraa = letter -> name -> name.startsWith(letter);
		final long countFriendsStartNN = friends.stream().filter(startsWithLetter.apply("N")).count();
		final long countFriendsStartBB = friends.stream().filter(startsWithLetter.apply("B")).count();
		
		
//reduce		
//As an example, let’s read over the given collection of names and display the
		//longest one. If there is more than one name with the same longest length,
		//we’ll display the first one we find.
		
		final Optional<String> aLongName =
				friends.stream()
				.reduce((name1, name2) ->
				name1.length() >= name2.length() ? name1 : name2);
				aLongName.ifPresent(name ->
				System.out.println(String.format("A longest name: %s", name)));
//join 
				
				System.out.println(String.join(", ", friends));
		
		
	}

// Picking an Element
	
	// Let’s look at the complexity introduced by the habitual approach
	public static void pickName(final List<String> names, final String startingLetter) {
		String foundName = null;

		for (String name : names) {
			if (name.startsWith(startingLetter)) {
				foundName = name;
				break;
			}
		}
		System.out.print(String.format("A name starting with %s: ", startingLetter));
		if (foundName != null) {
			System.out.println(foundName);
		} else {
			System.out.println("No name found");
		}
	}
	
	
	//The Optional class is useful whenever the result may be absent. It protects us
	//from getting a NullPointerException by accident and makes it quite explicit to the
	//reader that “no result found” is a possible outcome. We can inquire if an
	//object is present by using the isPresent() method, and we can obtain the current
	//value using its get() method.
	//findfirst() in stream class will help to return the first value 
	public static void pickName8(final List<String> names, final String startingLetter) {
		final Optional<String> foundName = names.stream()
												.filter(name -> name.startsWith(startingLetter))
												.findFirst();
		System.out.println(
				String.format("A name starting with %s: %s", startingLetter, foundName.orElse("No name found")));
	}
	
	
	
	
	
	
	
	public static Predicate<String> checkIfStartsWith(final String letter) {
		return name -> name.startsWith(letter);
	}

	public static void main(String[] args) {
		Test t = new Test();
		t.sample();
	}

}
